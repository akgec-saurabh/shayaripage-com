datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

model User {
  id            String          @id @default(cuid())
  name          String?
  username      String?         @unique
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String  @unique
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  refresh_token_expires_in Int?
  user                     User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Poet {
  id        Int       @id @default(autoincrement())
  username  String    @unique
  name      String?
  bio       String?
  shayaris  Shayari[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Shayari {
  id        Int         @id @default(autoincrement())
  title     String
  content   String
  type      ShayariType
  poet      Poet        @relation(fields: [poetId], references: [id])
  poetId    Int
  likes     Like[]
  comments  Comment[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

enum ShayariType {
  GHAZAL
  NAZM
  SHAYARI
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    Int // Foreign key from the User model, if you have one
  shayari   Shayari  @relation(fields: [shayariId], references: [id])
  shayariId Int
  createdAt DateTime @default(now())
}

model Comment {
  id        Int      @id @default(autoincrement())
  userId    Int // Foreign key from the User model, if you have one
  shayari   Shayari  @relation(fields: [shayariId], references: [id])
  shayariId Int
  content   String
  createdAt DateTime @default(now())
}
